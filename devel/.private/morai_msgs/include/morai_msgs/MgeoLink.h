// Generated by gencpp from file morai_msgs/MgeoLink.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_MGEOLINK_H
#define MORAI_MSGS_MESSAGE_MGEOLINK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct MgeoLink_
{
  typedef MgeoLink_<ContainerAllocator> Type;

  MgeoLink_()
    : link_id()
    , cost(0.0)
    , time_cost(0.0)
    , lane_idx(0)
    , left_link_id()
    , right_link_id()
    , to_node_id()
    , from_node_id()
    , link_type(0)
    , length(0)
    , speed(0)
    , change_lane(0)
    , change_link_id()
    , waypoints()  {
    }
  MgeoLink_(const ContainerAllocator& _alloc)
    : link_id(_alloc)
    , cost(0.0)
    , time_cost(0.0)
    , lane_idx(0)
    , left_link_id(_alloc)
    , right_link_id(_alloc)
    , to_node_id(_alloc)
    , from_node_id(_alloc)
    , link_type(0)
    , length(0)
    , speed(0)
    , change_lane(0)
    , change_link_id(_alloc)
    , waypoints(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _link_id_type;
  _link_id_type link_id;

   typedef float _cost_type;
  _cost_type cost;

   typedef float _time_cost_type;
  _time_cost_type time_cost;

   typedef uint32_t _lane_idx_type;
  _lane_idx_type lane_idx;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _left_link_id_type;
  _left_link_id_type left_link_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _right_link_id_type;
  _right_link_id_type right_link_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _to_node_id_type;
  _to_node_id_type to_node_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _from_node_id_type;
  _from_node_id_type from_node_id;

   typedef int32_t _link_type_type;
  _link_type_type link_type;

   typedef uint32_t _length_type;
  _length_type length;

   typedef uint32_t _speed_type;
  _speed_type speed;

   typedef int32_t _change_lane_type;
  _change_lane_type change_lane;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _change_link_id_type;
  _change_link_id_type change_link_id;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _waypoints_type;
  _waypoints_type waypoints;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LINK_NONE)
  #undef LINK_NONE
#endif
#if defined(_WIN32) && defined(LINK_TOLLGATE_NORMAL)
  #undef LINK_TOLLGATE_NORMAL
#endif
#if defined(_WIN32) && defined(LINK_BUS_LANE)
  #undef LINK_BUS_LANE
#endif
#if defined(_WIN32) && defined(LINK_REVERSIBLE_LANE)
  #undef LINK_REVERSIBLE_LANE
#endif
#if defined(_WIN32) && defined(LINK_REGULAR_LANE)
  #undef LINK_REGULAR_LANE
#endif
#if defined(_WIN32) && defined(CHANGE_NONE)
  #undef CHANGE_NONE
#endif
#if defined(_WIN32) && defined(CHANGE_LEFT)
  #undef CHANGE_LEFT
#endif
#if defined(_WIN32) && defined(CHANGE_RIGHT)
  #undef CHANGE_RIGHT
#endif

  enum {
    LINK_NONE = 0,
    LINK_TOLLGATE_NORMAL = 3,
    LINK_BUS_LANE = 4,
    LINK_REVERSIBLE_LANE = 5,
    LINK_REGULAR_LANE = 6,
    CHANGE_NONE = 0,
    CHANGE_LEFT = 1,
    CHANGE_RIGHT = 2,
  };


  typedef boost::shared_ptr< ::morai_msgs::MgeoLink_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::MgeoLink_<ContainerAllocator> const> ConstPtr;

}; // struct MgeoLink_

typedef ::morai_msgs::MgeoLink_<std::allocator<void> > MgeoLink;

typedef boost::shared_ptr< ::morai_msgs::MgeoLink > MgeoLinkPtr;
typedef boost::shared_ptr< ::morai_msgs::MgeoLink const> MgeoLinkConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::MgeoLink_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::MgeoLink_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::MgeoLink_<ContainerAllocator1> & lhs, const ::morai_msgs::MgeoLink_<ContainerAllocator2> & rhs)
{
  return lhs.link_id == rhs.link_id &&
    lhs.cost == rhs.cost &&
    lhs.time_cost == rhs.time_cost &&
    lhs.lane_idx == rhs.lane_idx &&
    lhs.left_link_id == rhs.left_link_id &&
    lhs.right_link_id == rhs.right_link_id &&
    lhs.to_node_id == rhs.to_node_id &&
    lhs.from_node_id == rhs.from_node_id &&
    lhs.link_type == rhs.link_type &&
    lhs.length == rhs.length &&
    lhs.speed == rhs.speed &&
    lhs.change_lane == rhs.change_lane &&
    lhs.change_link_id == rhs.change_link_id &&
    lhs.waypoints == rhs.waypoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::MgeoLink_<ContainerAllocator1> & lhs, const ::morai_msgs::MgeoLink_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::MgeoLink_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::MgeoLink_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::MgeoLink_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::MgeoLink_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::MgeoLink_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::MgeoLink_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::MgeoLink_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5259cb6df2dc66cea1017651f36dfbf5";
  }

  static const char* value(const ::morai_msgs::MgeoLink_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5259cb6df2dc66ceULL;
  static const uint64_t static_value2 = 0xa1017651f36dfbf5ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::MgeoLink_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/MgeoLink";
  }

  static const char* value(const ::morai_msgs::MgeoLink_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::MgeoLink_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string link_id\n"
"float32 cost\n"
"float32 time_cost\n"
"\n"
"uint32 lane_idx\n"
"string left_link_id\n"
"string right_link_id\n"
"\n"
"string to_node_id\n"
"string from_node_id\n"
"\n"
"int32 link_type\n"
"uint32 length\n"
"uint32 speed\n"
"\n"
"# 0: not change, 1: left, 2: right\n"
"int32 change_lane\n"
"# change target link id\n"
"string change_link_id\n"
"\n"
"# link_type enum\n"
"int32 LINK_NONE=0\n"
"int32 LINK_TOLLGATE_NORMAL=3\n"
"int32 LINK_BUS_LANE=4\n"
"int32 LINK_REVERSIBLE_LANE=5\n"
"int32 LINK_REGULAR_LANE=6\n"
"\n"
"# change_lane enum\n"
"int32 CHANGE_NONE=0\n"
"int32 CHANGE_LEFT=1\n"
"int32 CHANGE_RIGHT=2\n"
"\n"
"geometry_msgs/Pose[] waypoints\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::morai_msgs::MgeoLink_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::MgeoLink_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.link_id);
      stream.next(m.cost);
      stream.next(m.time_cost);
      stream.next(m.lane_idx);
      stream.next(m.left_link_id);
      stream.next(m.right_link_id);
      stream.next(m.to_node_id);
      stream.next(m.from_node_id);
      stream.next(m.link_type);
      stream.next(m.length);
      stream.next(m.speed);
      stream.next(m.change_lane);
      stream.next(m.change_link_id);
      stream.next(m.waypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MgeoLink_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::MgeoLink_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::MgeoLink_<ContainerAllocator>& v)
  {
    s << indent << "link_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.link_id);
    s << indent << "cost: ";
    Printer<float>::stream(s, indent + "  ", v.cost);
    s << indent << "time_cost: ";
    Printer<float>::stream(s, indent + "  ", v.time_cost);
    s << indent << "lane_idx: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.lane_idx);
    s << indent << "left_link_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.left_link_id);
    s << indent << "right_link_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.right_link_id);
    s << indent << "to_node_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.to_node_id);
    s << indent << "from_node_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.from_node_id);
    s << indent << "link_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.link_type);
    s << indent << "length: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.length);
    s << indent << "speed: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.speed);
    s << indent << "change_lane: ";
    Printer<int32_t>::stream(s, indent + "  ", v.change_lane);
    s << indent << "change_link_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.change_link_id);
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_MGEOLINK_H
