// Generated by gencpp from file morai_msgs/VehicleCommand.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_VEHICLECOMMAND_H
#define MORAI_MSGS_MESSAGE_VEHICLECOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace morai_msgs
{
template <class ContainerAllocator>
struct VehicleCommand_
{
  typedef VehicleCommand_<ContainerAllocator> Type;

  VehicleCommand_()
    : mode(0)
    , accel(0.0)
    , brake(0.0)
    , acceleration(0.0)
    , steering_angle(0.0)  {
    }
  VehicleCommand_(const ContainerAllocator& _alloc)
    : mode(0)
    , accel(0.0)
    , brake(0.0)
    , acceleration(0.0)
    , steering_angle(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _mode_type;
  _mode_type mode;

   typedef double _accel_type;
  _accel_type accel;

   typedef double _brake_type;
  _brake_type brake;

   typedef double _acceleration_type;
  _acceleration_type acceleration;

   typedef double _steering_angle_type;
  _steering_angle_type steering_angle;





  typedef boost::shared_ptr< ::morai_msgs::VehicleCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::VehicleCommand_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleCommand_

typedef ::morai_msgs::VehicleCommand_<std::allocator<void> > VehicleCommand;

typedef boost::shared_ptr< ::morai_msgs::VehicleCommand > VehicleCommandPtr;
typedef boost::shared_ptr< ::morai_msgs::VehicleCommand const> VehicleCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::VehicleCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::VehicleCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::VehicleCommand_<ContainerAllocator1> & lhs, const ::morai_msgs::VehicleCommand_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.accel == rhs.accel &&
    lhs.brake == rhs.brake &&
    lhs.acceleration == rhs.acceleration &&
    lhs.steering_angle == rhs.steering_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::VehicleCommand_<ContainerAllocator1> & lhs, const ::morai_msgs::VehicleCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::VehicleCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::VehicleCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::VehicleCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::VehicleCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::VehicleCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::VehicleCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::VehicleCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1965816c5fabf849455061a99d17c29";
  }

  static const char* value(const ::morai_msgs::VehicleCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1965816c5fabf84ULL;
  static const uint64_t static_value2 = 0x9455061a99d17c29ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::VehicleCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/VehicleCommand";
  }

  static const char* value(const ::morai_msgs::VehicleCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::VehicleCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 mode\n"
"float64 accel\n"
"float64 brake\n"
"float64 acceleration\n"
"float64 steering_angle\n"
;
  }

  static const char* value(const ::morai_msgs::VehicleCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::VehicleCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.accel);
      stream.next(m.brake);
      stream.next(m.acceleration);
      stream.next(m.steering_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::VehicleCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::VehicleCommand_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "accel: ";
    Printer<double>::stream(s, indent + "  ", v.accel);
    s << indent << "brake: ";
    Printer<double>::stream(s, indent + "  ", v.brake);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
    s << indent << "steering_angle: ";
    Printer<double>::stream(s, indent + "  ", v.steering_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_VEHICLECOMMAND_H
