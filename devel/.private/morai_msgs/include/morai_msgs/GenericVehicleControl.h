// Generated by gencpp from file morai_msgs/GenericVehicleControl.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_GENERICVEHICLECONTROL_H
#define MORAI_MSGS_MESSAGE_GENERICVEHICLECONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct GenericVehicleControl_
{
  typedef GenericVehicleControl_<ContainerAllocator> Type;

  GenericVehicleControl_()
    : header()
    , emergency_stop(false)
    , gear(0)
    , speed(0.0)
    , acceleration(0.0)
    , steer(0.0)  {
    }
  GenericVehicleControl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , emergency_stop(false)
    , gear(0)
    , speed(0.0)
    , acceleration(0.0)
    , steer(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _emergency_stop_type;
  _emergency_stop_type emergency_stop;

   typedef uint8_t _gear_type;
  _gear_type gear;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _acceleration_type;
  _acceleration_type acceleration;

   typedef double _steer_type;
  _steer_type steer;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TYPE_GEAR_FORWARD)
  #undef TYPE_GEAR_FORWARD
#endif
#if defined(_WIN32) && defined(TYPE_GEAR_NEUTRAL)
  #undef TYPE_GEAR_NEUTRAL
#endif
#if defined(_WIN32) && defined(TYPE_GEAR_BACKWARD)
  #undef TYPE_GEAR_BACKWARD
#endif
#if defined(_WIN32) && defined(TYPE_GEAR_PARKING)
  #undef TYPE_GEAR_PARKING
#endif
#if defined(_WIN32) && defined(CONST_SPEED_UPPERBOUND)
  #undef CONST_SPEED_UPPERBOUND
#endif
#if defined(_WIN32) && defined(CONST_SPEED_LOWERBOUND)
  #undef CONST_SPEED_LOWERBOUND
#endif
#if defined(_WIN32) && defined(CONST_ACCELERATION_UPPERBOUND)
  #undef CONST_ACCELERATION_UPPERBOUND
#endif
#if defined(_WIN32) && defined(CONST_ACCELERATION_LOWERBOUND)
  #undef CONST_ACCELERATION_LOWERBOUND
#endif
#if defined(_WIN32) && defined(CONST_STEER_LEFTMOST)
  #undef CONST_STEER_LEFTMOST
#endif
#if defined(_WIN32) && defined(CONST_STEER_RIGHTMOST)
  #undef CONST_STEER_RIGHTMOST
#endif

  enum {
    TYPE_GEAR_FORWARD = 0u,
    TYPE_GEAR_NEUTRAL = 1u,
    TYPE_GEAR_BACKWARD = 2u,
    TYPE_GEAR_PARKING = 3u,
  };

  static const double CONST_SPEED_UPPERBOUND;
  static const double CONST_SPEED_LOWERBOUND;
  static const double CONST_ACCELERATION_UPPERBOUND;
  static const double CONST_ACCELERATION_LOWERBOUND;
  static const double CONST_STEER_LEFTMOST;
  static const double CONST_STEER_RIGHTMOST;

  typedef boost::shared_ptr< ::morai_msgs::GenericVehicleControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::GenericVehicleControl_<ContainerAllocator> const> ConstPtr;

}; // struct GenericVehicleControl_

typedef ::morai_msgs::GenericVehicleControl_<std::allocator<void> > GenericVehicleControl;

typedef boost::shared_ptr< ::morai_msgs::GenericVehicleControl > GenericVehicleControlPtr;
typedef boost::shared_ptr< ::morai_msgs::GenericVehicleControl const> GenericVehicleControlConstPtr;

// constants requiring out of line definition

   

   

   

   

   
   template<typename ContainerAllocator> const double
      GenericVehicleControl_<ContainerAllocator>::CONST_SPEED_UPPERBOUND =
        
          5.5
        
        ;
   

   
   template<typename ContainerAllocator> const double
      GenericVehicleControl_<ContainerAllocator>::CONST_SPEED_LOWERBOUND =
        
          -5.5
        
        ;
   

   
   template<typename ContainerAllocator> const double
      GenericVehicleControl_<ContainerAllocator>::CONST_ACCELERATION_UPPERBOUND =
        
          4.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      GenericVehicleControl_<ContainerAllocator>::CONST_ACCELERATION_LOWERBOUND =
        
          -4.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      GenericVehicleControl_<ContainerAllocator>::CONST_STEER_LEFTMOST =
        
          28.1
        
        ;
   

   
   template<typename ContainerAllocator> const double
      GenericVehicleControl_<ContainerAllocator>::CONST_STEER_RIGHTMOST =
        
          -28.1
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::GenericVehicleControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::GenericVehicleControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::GenericVehicleControl_<ContainerAllocator1> & lhs, const ::morai_msgs::GenericVehicleControl_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.emergency_stop == rhs.emergency_stop &&
    lhs.gear == rhs.gear &&
    lhs.speed == rhs.speed &&
    lhs.acceleration == rhs.acceleration &&
    lhs.steer == rhs.steer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::GenericVehicleControl_<ContainerAllocator1> & lhs, const ::morai_msgs::GenericVehicleControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::GenericVehicleControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::GenericVehicleControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::GenericVehicleControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::GenericVehicleControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::GenericVehicleControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::GenericVehicleControl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::GenericVehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e7242e2ff6ba1d4caf20d5a90ed61c09";
  }

  static const char* value(const ::morai_msgs::GenericVehicleControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe7242e2ff6ba1d4cULL;
  static const uint64_t static_value2 = 0xaf20d5a90ed61c09ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::GenericVehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/GenericVehicleControl";
  }

  static const char* value(const ::morai_msgs::GenericVehicleControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::GenericVehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# You should set header.stamp when you publish this message to the correspoding topic\n"
"#\n"
"# - The header.stamp will be used for measuring timeout in the lower layer for fail-safe\n"
"Header header\n"
"\n"
"# True for emergency stop\n"
"# \n"
"# - DO NOT set this field unless the severe problem is detected(or expected)\n"
"bool emergency_stop\n"
"\n"
"uint8 TYPE_GEAR_FORWARD=0\n"
"uint8 TYPE_GEAR_NEUTRAL=1\n"
"uint8 TYPE_GEAR_BACKWARD=2\n"
"uint8 TYPE_GEAR_PARKING=3\n"
"\n"
"# One of the above TYPEGEAR* values\n"
"#\n"
"# - Values not in the above type will be ignored\n"
"uint8 gear\n"
"\n"
"float64 CONST_SPEED_UPPERBOUND=5.5\n"
"float64 CONST_SPEED_LOWERBOUND=-5.5\n"
"\n"
"# Target speed in unit of meter per second(m/sec)\n"
"#\n"
"# - Positive value means forward movement, negative value means reverse movement\n"
"# - The value out of range [CONST_SPEED_LOWERBOUND, CONST_SPEED_LOWERBOUND] will be adjusted to CONST_SPEED_LOWERBOUND/CONST_SPEED_UPPERBOUND\n"
"float64 speed\n"
"\n"
"float64 CONST_ACCELERATION_UPPERBOUND=4.0\n"
"float64 CONST_ACCELERATION_LOWERBOUND=-4.0\n"
"\n"
"# Targer acceleration in meter per second^2(m/sec^2)\n"
"#\n"
"# - Positive value means accel., negative value means deaccel.\n"
"# - The value out of range [CONST_ACCELERATION_LOWERBOUND, CONST_ACCELERATION_LOWERBOUND] will be adjusted to CONST_ACCELERATION_LOWERBOUND/CONST_ACCELERATION_UPPERBOUND\n"
"float64 acceleration\n"
"\n"
"float64 CONST_STEER_LEFTMOST=28.1\n"
"float64 CONST_STEER_RIGHTMOST=-28.1\n"
"\n"
"# Target steering angle in unit of degree(deg)\n"
"#\n"
"# - The negative value indicates right steer(positive: left steer)\n"
"# - The value out of range [CONST_STEER_RIGHTMOST, CONST_STEER_LEFTMOST] will be adjusted to CONST_STEER_LEFTMOST/CONST_STEER_RIGHTMOST\n"
"float64 steer\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::morai_msgs::GenericVehicleControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::GenericVehicleControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.emergency_stop);
      stream.next(m.gear);
      stream.next(m.speed);
      stream.next(m.acceleration);
      stream.next(m.steer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GenericVehicleControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::GenericVehicleControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::GenericVehicleControl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "emergency_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_stop);
    s << indent << "gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
    s << indent << "steer: ";
    Printer<double>::stream(s, indent + "  ", v.steer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_GENERICVEHICLECONTROL_H
