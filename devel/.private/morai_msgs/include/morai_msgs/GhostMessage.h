// Generated by gencpp from file morai_msgs/GhostMessage.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_GHOSTMESSAGE_H
#define MORAI_MSGS_MESSAGE_GHOSTMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct GhostMessage_
{
  typedef GhostMessage_<ContainerAllocator> Type;

  GhostMessage_()
    : header()
    , option_geometry(0)
    , option_dynamics(0)
    , offset_east(0.0)
    , offset_north(0.0)
    , offset_height(0.0)
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)
    , heading(0.0)
    , velocity(0.0)  {
    }
  GhostMessage_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , option_geometry(0)
    , option_dynamics(0)
    , offset_east(0.0)
    , offset_north(0.0)
    , offset_height(0.0)
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)
    , heading(0.0)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _option_geometry_type;
  _option_geometry_type option_geometry;

   typedef int8_t _option_dynamics_type;
  _option_dynamics_type option_dynamics;

   typedef double _offset_east_type;
  _offset_east_type offset_east;

   typedef double _offset_north_type;
  _offset_north_type offset_north;

   typedef double _offset_height_type;
  _offset_height_type offset_height;

   typedef double _pos_x_type;
  _pos_x_type pos_x;

   typedef double _pos_y_type;
  _pos_y_type pos_y;

   typedef double _pos_z_type;
  _pos_z_type pos_z;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::morai_msgs::GhostMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::GhostMessage_<ContainerAllocator> const> ConstPtr;

}; // struct GhostMessage_

typedef ::morai_msgs::GhostMessage_<std::allocator<void> > GhostMessage;

typedef boost::shared_ptr< ::morai_msgs::GhostMessage > GhostMessagePtr;
typedef boost::shared_ptr< ::morai_msgs::GhostMessage const> GhostMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::GhostMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::GhostMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::GhostMessage_<ContainerAllocator1> & lhs, const ::morai_msgs::GhostMessage_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.option_geometry == rhs.option_geometry &&
    lhs.option_dynamics == rhs.option_dynamics &&
    lhs.offset_east == rhs.offset_east &&
    lhs.offset_north == rhs.offset_north &&
    lhs.offset_height == rhs.offset_height &&
    lhs.pos_x == rhs.pos_x &&
    lhs.pos_y == rhs.pos_y &&
    lhs.pos_z == rhs.pos_z &&
    lhs.heading == rhs.heading &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::GhostMessage_<ContainerAllocator1> & lhs, const ::morai_msgs::GhostMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::GhostMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::GhostMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::GhostMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::GhostMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::GhostMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::GhostMessage_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::GhostMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff33699472448776499294d59ada2106";
  }

  static const char* value(const ::morai_msgs::GhostMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff33699472448776ULL;
  static const uint64_t static_value2 = 0x499294d59ada2106ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::GhostMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/GhostMessage";
  }

  static const char* value(const ::morai_msgs::GhostMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::GhostMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int16 option_geometry\n"
"byte option_dynamics\n"
"\n"
"float64 offset_east\n"
"float64 offset_north\n"
"float64 offset_height\n"
"\n"
"float64 pos_x\n"
"float64 pos_y\n"
"float64 pos_z\n"
"\n"
"float64 heading\n"
"\n"
"float64 velocity\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::morai_msgs::GhostMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::GhostMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.option_geometry);
      stream.next(m.option_dynamics);
      stream.next(m.offset_east);
      stream.next(m.offset_north);
      stream.next(m.offset_height);
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.pos_z);
      stream.next(m.heading);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GhostMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::GhostMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::GhostMessage_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "option_geometry: ";
    Printer<int16_t>::stream(s, indent + "  ", v.option_geometry);
    s << indent << "option_dynamics: ";
    Printer<int8_t>::stream(s, indent + "  ", v.option_dynamics);
    s << indent << "offset_east: ";
    Printer<double>::stream(s, indent + "  ", v.offset_east);
    s << indent << "offset_north: ";
    Printer<double>::stream(s, indent + "  ", v.offset_north);
    s << indent << "offset_height: ";
    Printer<double>::stream(s, indent + "  ", v.offset_height);
    s << indent << "pos_x: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y);
    s << indent << "pos_z: ";
    Printer<double>::stream(s, indent + "  ", v.pos_z);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_GHOSTMESSAGE_H
