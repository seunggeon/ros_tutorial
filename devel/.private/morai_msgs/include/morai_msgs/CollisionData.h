// Generated by gencpp from file morai_msgs/CollisionData.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_COLLISIONDATA_H
#define MORAI_MSGS_MESSAGE_COLLISIONDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct CollisionData_
{
  typedef CollisionData_<ContainerAllocator> Type;

  CollisionData_()
    : header()
    , object_type()
    , object_id()
    , pose_x()
    , pose_y()
    , pose_z()
    , heading()
    , global_offset_x(0.0)
    , global_offset_y(0.0)
    , global_offset_z(0.0)  {
    }
  CollisionData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , object_type(_alloc)
    , object_id(_alloc)
    , pose_x(_alloc)
    , pose_y(_alloc)
    , pose_z(_alloc)
    , heading(_alloc)
    , global_offset_x(0.0)
    , global_offset_y(0.0)
    , global_offset_z(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _object_type_type;
  _object_type_type object_type;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _object_id_type;
  _object_id_type object_id;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pose_x_type;
  _pose_x_type pose_x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pose_y_type;
  _pose_y_type pose_y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pose_z_type;
  _pose_z_type pose_z;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _heading_type;
  _heading_type heading;

   typedef double _global_offset_x_type;
  _global_offset_x_type global_offset_x;

   typedef double _global_offset_y_type;
  _global_offset_y_type global_offset_y;

   typedef double _global_offset_z_type;
  _global_offset_z_type global_offset_z;





  typedef boost::shared_ptr< ::morai_msgs::CollisionData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::CollisionData_<ContainerAllocator> const> ConstPtr;

}; // struct CollisionData_

typedef ::morai_msgs::CollisionData_<std::allocator<void> > CollisionData;

typedef boost::shared_ptr< ::morai_msgs::CollisionData > CollisionDataPtr;
typedef boost::shared_ptr< ::morai_msgs::CollisionData const> CollisionDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::CollisionData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::CollisionData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::CollisionData_<ContainerAllocator1> & lhs, const ::morai_msgs::CollisionData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.object_type == rhs.object_type &&
    lhs.object_id == rhs.object_id &&
    lhs.pose_x == rhs.pose_x &&
    lhs.pose_y == rhs.pose_y &&
    lhs.pose_z == rhs.pose_z &&
    lhs.heading == rhs.heading &&
    lhs.global_offset_x == rhs.global_offset_x &&
    lhs.global_offset_y == rhs.global_offset_y &&
    lhs.global_offset_z == rhs.global_offset_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::CollisionData_<ContainerAllocator1> & lhs, const ::morai_msgs::CollisionData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::CollisionData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::CollisionData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::CollisionData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::CollisionData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::CollisionData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::CollisionData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::CollisionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0630fa51ee74e1abba7806555a178f91";
  }

  static const char* value(const ::morai_msgs::CollisionData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0630fa51ee74e1abULL;
  static const uint64_t static_value2 = 0xba7806555a178f91ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::CollisionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/CollisionData";
  }

  static const char* value(const ::morai_msgs::CollisionData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::CollisionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"string[] object_type\n"
"int32[] object_id\n"
"\n"
"float32[] pose_x\n"
"float32[] pose_y\n"
"float32[] pose_z\n"
"float32[] heading\n"
"\n"
"float64 global_offset_x\n"
"float64 global_offset_y\n"
"float64 global_offset_z\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::morai_msgs::CollisionData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::CollisionData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.object_type);
      stream.next(m.object_id);
      stream.next(m.pose_x);
      stream.next(m.pose_y);
      stream.next(m.pose_z);
      stream.next(m.heading);
      stream.next(m.global_offset_x);
      stream.next(m.global_offset_y);
      stream.next(m.global_offset_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CollisionData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::CollisionData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::CollisionData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "object_type[]" << std::endl;
    for (size_t i = 0; i < v.object_type.size(); ++i)
    {
      s << indent << "  object_type[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_type[i]);
    }
    s << indent << "object_id[]" << std::endl;
    for (size_t i = 0; i < v.object_id.size(); ++i)
    {
      s << indent << "  object_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.object_id[i]);
    }
    s << indent << "pose_x[]" << std::endl;
    for (size_t i = 0; i < v.pose_x.size(); ++i)
    {
      s << indent << "  pose_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pose_x[i]);
    }
    s << indent << "pose_y[]" << std::endl;
    for (size_t i = 0; i < v.pose_y.size(); ++i)
    {
      s << indent << "  pose_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pose_y[i]);
    }
    s << indent << "pose_z[]" << std::endl;
    for (size_t i = 0; i < v.pose_z.size(); ++i)
    {
      s << indent << "  pose_z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pose_z[i]);
    }
    s << indent << "heading[]" << std::endl;
    for (size_t i = 0; i < v.heading.size(); ++i)
    {
      s << indent << "  heading[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.heading[i]);
    }
    s << indent << "global_offset_x: ";
    Printer<double>::stream(s, indent + "  ", v.global_offset_x);
    s << indent << "global_offset_y: ";
    Printer<double>::stream(s, indent + "  ", v.global_offset_y);
    s << indent << "global_offset_z: ";
    Printer<double>::stream(s, indent + "  ", v.global_offset_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_COLLISIONDATA_H
