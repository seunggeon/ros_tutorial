// Generated by gencpp from file morai_msgs/MgeoLinkList.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_MGEOLINKLIST_H
#define MORAI_MSGS_MESSAGE_MGEOLINKLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <morai_msgs/MgeoLink.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct MgeoLinkList_
{
  typedef MgeoLinkList_<ContainerAllocator> Type;

  MgeoLinkList_()
    : header()
    , link_list()  {
    }
  MgeoLinkList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , link_list(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::morai_msgs::MgeoLink_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::morai_msgs::MgeoLink_<ContainerAllocator> >::other >  _link_list_type;
  _link_list_type link_list;





  typedef boost::shared_ptr< ::morai_msgs::MgeoLinkList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::MgeoLinkList_<ContainerAllocator> const> ConstPtr;

}; // struct MgeoLinkList_

typedef ::morai_msgs::MgeoLinkList_<std::allocator<void> > MgeoLinkList;

typedef boost::shared_ptr< ::morai_msgs::MgeoLinkList > MgeoLinkListPtr;
typedef boost::shared_ptr< ::morai_msgs::MgeoLinkList const> MgeoLinkListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::MgeoLinkList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::MgeoLinkList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::MgeoLinkList_<ContainerAllocator1> & lhs, const ::morai_msgs::MgeoLinkList_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.link_list == rhs.link_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::MgeoLinkList_<ContainerAllocator1> & lhs, const ::morai_msgs::MgeoLinkList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::MgeoLinkList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::MgeoLinkList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::MgeoLinkList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::MgeoLinkList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::MgeoLinkList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::MgeoLinkList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::MgeoLinkList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a00a34e18d90273a0b75ccb7cc3710dc";
  }

  static const char* value(const ::morai_msgs::MgeoLinkList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa00a34e18d90273aULL;
  static const uint64_t static_value2 = 0x0b75ccb7cc3710dcULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::MgeoLinkList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/MgeoLinkList";
  }

  static const char* value(const ::morai_msgs::MgeoLinkList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::MgeoLinkList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"MgeoLink[] link_list\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: morai_msgs/MgeoLink\n"
"string link_id\n"
"float32 cost\n"
"float32 time_cost\n"
"\n"
"uint32 lane_idx\n"
"string left_link_id\n"
"string right_link_id\n"
"\n"
"string to_node_id\n"
"string from_node_id\n"
"\n"
"int32 link_type\n"
"uint32 length\n"
"uint32 speed\n"
"\n"
"# 0: not change, 1: left, 2: right\n"
"int32 change_lane\n"
"# change target link id\n"
"string change_link_id\n"
"\n"
"# link_type enum\n"
"int32 LINK_NONE=0\n"
"int32 LINK_TOLLGATE_NORMAL=3\n"
"int32 LINK_BUS_LANE=4\n"
"int32 LINK_REVERSIBLE_LANE=5\n"
"int32 LINK_REGULAR_LANE=6\n"
"\n"
"# change_lane enum\n"
"int32 CHANGE_NONE=0\n"
"int32 CHANGE_LEFT=1\n"
"int32 CHANGE_RIGHT=2\n"
"\n"
"geometry_msgs/Pose[] waypoints\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::morai_msgs::MgeoLinkList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::MgeoLinkList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.link_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MgeoLinkList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::MgeoLinkList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::MgeoLinkList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "link_list[]" << std::endl;
    for (size_t i = 0; i < v.link_list.size(); ++i)
    {
      s << indent << "  link_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::morai_msgs::MgeoLink_<ContainerAllocator> >::stream(s, indent + "    ", v.link_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_MGEOLINKLIST_H
