# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from morai_msgs/Mgeo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import morai_msgs.msg
import std_msgs.msg

class Mgeo(genpy.Message):
  _md5sum = "ffa290ab15496480ebcd89bbc9fb80e1"
  _type = "morai_msgs/Mgeo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string map_name

geometry_msgs/Pose local_offset
bool lane_change_link_include

MgeoNodeList node_list
MgeoLinkList link_list

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: morai_msgs/MgeoNodeList
Header header

MgeoNode[] node_list

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: morai_msgs/MgeoNode
string node_id
float32 cost
float32 time_cost

int32 node_type #if the node type is -1, unuse this data

string[] to_link_id
string[] from_link_id

geometry_msgs/Pose node

================================================================================
MSG: morai_msgs/MgeoLinkList
Header header

MgeoLink[] link_list

================================================================================
MSG: morai_msgs/MgeoLink
string link_id
float32 cost
float32 time_cost

uint32 lane_idx
string left_link_id
string right_link_id

string to_node_id
string from_node_id

int32 link_type
uint32 length
uint32 speed

# 0: not change, 1: left, 2: right
int32 change_lane
# change target link id
string change_link_id

# link_type enum
int32 LINK_NONE=0
int32 LINK_TOLLGATE_NORMAL=3
int32 LINK_BUS_LANE=4
int32 LINK_REVERSIBLE_LANE=5
int32 LINK_REGULAR_LANE=6

# change_lane enum
int32 CHANGE_NONE=0
int32 CHANGE_LEFT=1
int32 CHANGE_RIGHT=2

geometry_msgs/Pose[] waypoints
"""
  __slots__ = ['map_name','local_offset','lane_change_link_include','node_list','link_list']
  _slot_types = ['string','geometry_msgs/Pose','bool','morai_msgs/MgeoNodeList','morai_msgs/MgeoLinkList']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       map_name,local_offset,lane_change_link_include,node_list,link_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Mgeo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.map_name is None:
        self.map_name = ''
      if self.local_offset is None:
        self.local_offset = geometry_msgs.msg.Pose()
      if self.lane_change_link_include is None:
        self.lane_change_link_include = False
      if self.node_list is None:
        self.node_list = morai_msgs.msg.MgeoNodeList()
      if self.link_list is None:
        self.link_list = morai_msgs.msg.MgeoLinkList()
    else:
      self.map_name = ''
      self.local_offset = geometry_msgs.msg.Pose()
      self.lane_change_link_include = False
      self.node_list = morai_msgs.msg.MgeoNodeList()
      self.link_list = morai_msgs.msg.MgeoLinkList()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.map_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7dB3I().pack(_x.local_offset.position.x, _x.local_offset.position.y, _x.local_offset.position.z, _x.local_offset.orientation.x, _x.local_offset.orientation.y, _x.local_offset.orientation.z, _x.local_offset.orientation.w, _x.lane_change_link_include, _x.node_list.header.seq, _x.node_list.header.stamp.secs, _x.node_list.header.stamp.nsecs))
      _x = self.node_list.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.node_list.node_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.node_list.node_list:
        _x = val1.node_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2fi().pack(_x.cost, _x.time_cost, _x.node_type))
        length = len(val1.to_link_id)
        buff.write(_struct_I.pack(length))
        for val2 in val1.to_link_id:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        length = len(val1.from_link_id)
        buff.write(_struct_I.pack(length))
        for val2 in val1.from_link_id:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v1 = val1.node
        _v2 = _v1.position
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_3I().pack(_x.link_list.header.seq, _x.link_list.header.stamp.secs, _x.link_list.header.stamp.nsecs))
      _x = self.link_list.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.link_list.link_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.link_list.link_list:
        _x = val1.link_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2fI().pack(_x.cost, _x.time_cost, _x.lane_idx))
        _x = val1.left_link_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.right_link_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.to_node_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.from_node_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_i2Ii().pack(_x.link_type, _x.length, _x.speed, _x.change_lane))
        _x = val1.change_link_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.waypoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.waypoints:
          _v4 = val2.position
          _x = _v4
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v5 = val2.orientation
          _x = _v5
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.local_offset is None:
        self.local_offset = geometry_msgs.msg.Pose()
      if self.node_list is None:
        self.node_list = morai_msgs.msg.MgeoNodeList()
      if self.link_list is None:
        self.link_list = morai_msgs.msg.MgeoLinkList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.map_name = str[start:end]
      _x = self
      start = end
      end += 69
      (_x.local_offset.position.x, _x.local_offset.position.y, _x.local_offset.position.z, _x.local_offset.orientation.x, _x.local_offset.orientation.y, _x.local_offset.orientation.z, _x.local_offset.orientation.w, _x.lane_change_link_include, _x.node_list.header.seq, _x.node_list.header.stamp.secs, _x.node_list.header.stamp.nsecs,) = _get_struct_7dB3I().unpack(str[start:end])
      self.lane_change_link_include = bool(self.lane_change_link_include)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_list.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_list.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.node_list.node_list = []
      for i in range(0, length):
        val1 = morai_msgs.msg.MgeoNode()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.node_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.node_id = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.cost, _x.time_cost, _x.node_type,) = _get_struct_2fi().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.to_link_id = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.to_link_id.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.from_link_id = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.from_link_id.append(val2)
        _v6 = val1.node
        _v7 = _v6.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = _v6.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.node_list.node_list.append(val1)
      _x = self
      start = end
      end += 12
      (_x.link_list.header.seq, _x.link_list.header.stamp.secs, _x.link_list.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.link_list.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.link_list.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.link_list.link_list = []
      for i in range(0, length):
        val1 = morai_msgs.msg.MgeoLink()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_id = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.cost, _x.time_cost, _x.lane_idx,) = _get_struct_2fI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.left_link_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.left_link_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.right_link_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.right_link_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.to_node_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.to_node_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.from_node_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.from_node_id = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.link_type, _x.length, _x.speed, _x.change_lane,) = _get_struct_i2Ii().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.change_link_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.change_link_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.waypoints = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v9 = val2.position
          _x = _v9
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v10 = val2.orientation
          _x = _v10
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.waypoints.append(val2)
        self.link_list.link_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.map_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7dB3I().pack(_x.local_offset.position.x, _x.local_offset.position.y, _x.local_offset.position.z, _x.local_offset.orientation.x, _x.local_offset.orientation.y, _x.local_offset.orientation.z, _x.local_offset.orientation.w, _x.lane_change_link_include, _x.node_list.header.seq, _x.node_list.header.stamp.secs, _x.node_list.header.stamp.nsecs))
      _x = self.node_list.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.node_list.node_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.node_list.node_list:
        _x = val1.node_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2fi().pack(_x.cost, _x.time_cost, _x.node_type))
        length = len(val1.to_link_id)
        buff.write(_struct_I.pack(length))
        for val2 in val1.to_link_id:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        length = len(val1.from_link_id)
        buff.write(_struct_I.pack(length))
        for val2 in val1.from_link_id:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v11 = val1.node
        _v12 = _v11.position
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v13 = _v11.orientation
        _x = _v13
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_3I().pack(_x.link_list.header.seq, _x.link_list.header.stamp.secs, _x.link_list.header.stamp.nsecs))
      _x = self.link_list.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.link_list.link_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.link_list.link_list:
        _x = val1.link_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2fI().pack(_x.cost, _x.time_cost, _x.lane_idx))
        _x = val1.left_link_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.right_link_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.to_node_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.from_node_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_i2Ii().pack(_x.link_type, _x.length, _x.speed, _x.change_lane))
        _x = val1.change_link_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.waypoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.waypoints:
          _v14 = val2.position
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v15 = val2.orientation
          _x = _v15
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.local_offset is None:
        self.local_offset = geometry_msgs.msg.Pose()
      if self.node_list is None:
        self.node_list = morai_msgs.msg.MgeoNodeList()
      if self.link_list is None:
        self.link_list = morai_msgs.msg.MgeoLinkList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.map_name = str[start:end]
      _x = self
      start = end
      end += 69
      (_x.local_offset.position.x, _x.local_offset.position.y, _x.local_offset.position.z, _x.local_offset.orientation.x, _x.local_offset.orientation.y, _x.local_offset.orientation.z, _x.local_offset.orientation.w, _x.lane_change_link_include, _x.node_list.header.seq, _x.node_list.header.stamp.secs, _x.node_list.header.stamp.nsecs,) = _get_struct_7dB3I().unpack(str[start:end])
      self.lane_change_link_include = bool(self.lane_change_link_include)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_list.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_list.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.node_list.node_list = []
      for i in range(0, length):
        val1 = morai_msgs.msg.MgeoNode()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.node_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.node_id = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.cost, _x.time_cost, _x.node_type,) = _get_struct_2fi().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.to_link_id = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.to_link_id.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.from_link_id = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.from_link_id.append(val2)
        _v16 = val1.node
        _v17 = _v16.position
        _x = _v17
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v18 = _v16.orientation
        _x = _v18
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.node_list.node_list.append(val1)
      _x = self
      start = end
      end += 12
      (_x.link_list.header.seq, _x.link_list.header.stamp.secs, _x.link_list.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.link_list.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.link_list.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.link_list.link_list = []
      for i in range(0, length):
        val1 = morai_msgs.msg.MgeoLink()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_id = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.cost, _x.time_cost, _x.lane_idx,) = _get_struct_2fI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.left_link_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.left_link_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.right_link_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.right_link_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.to_node_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.to_node_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.from_node_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.from_node_id = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.link_type, _x.length, _x.speed, _x.change_lane,) = _get_struct_i2Ii().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.change_link_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.change_link_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.waypoints = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v19 = val2.position
          _x = _v19
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v20 = val2.orientation
          _x = _v20
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.waypoints.append(val2)
        self.link_list.link_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fI = None
def _get_struct_2fI():
    global _struct_2fI
    if _struct_2fI is None:
        _struct_2fI = struct.Struct("<2fI")
    return _struct_2fI
_struct_2fi = None
def _get_struct_2fi():
    global _struct_2fi
    if _struct_2fi is None:
        _struct_2fi = struct.Struct("<2fi")
    return _struct_2fi
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7dB3I = None
def _get_struct_7dB3I():
    global _struct_7dB3I
    if _struct_7dB3I is None:
        _struct_7dB3I = struct.Struct("<7dB3I")
    return _struct_7dB3I
_struct_i2Ii = None
def _get_struct_i2Ii():
    global _struct_i2Ii
    if _struct_i2Ii is None:
        _struct_i2Ii = struct.Struct("<i2Ii")
    return _struct_i2Ii
