# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from morai_msgs/GenericVehicleControl.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GenericVehicleControl(genpy.Message):
  _md5sum = "e7242e2ff6ba1d4caf20d5a90ed61c09"
  _type = "morai_msgs/GenericVehicleControl"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# You should set header.stamp when you publish this message to the correspoding topic
#
# - The header.stamp will be used for measuring timeout in the lower layer for fail-safe
Header header

# True for emergency stop
# 
# - DO NOT set this field unless the severe problem is detected(or expected)
bool emergency_stop

uint8 TYPE_GEAR_FORWARD=0
uint8 TYPE_GEAR_NEUTRAL=1
uint8 TYPE_GEAR_BACKWARD=2
uint8 TYPE_GEAR_PARKING=3

# One of the above TYPEGEAR* values
#
# - Values not in the above type will be ignored
uint8 gear

float64 CONST_SPEED_UPPERBOUND=5.5
float64 CONST_SPEED_LOWERBOUND=-5.5

# Target speed in unit of meter per second(m/sec)
#
# - Positive value means forward movement, negative value means reverse movement
# - The value out of range [CONST_SPEED_LOWERBOUND, CONST_SPEED_LOWERBOUND] will be adjusted to CONST_SPEED_LOWERBOUND/CONST_SPEED_UPPERBOUND
float64 speed

float64 CONST_ACCELERATION_UPPERBOUND=4.0
float64 CONST_ACCELERATION_LOWERBOUND=-4.0

# Targer acceleration in meter per second^2(m/sec^2)
#
# - Positive value means accel., negative value means deaccel.
# - The value out of range [CONST_ACCELERATION_LOWERBOUND, CONST_ACCELERATION_LOWERBOUND] will be adjusted to CONST_ACCELERATION_LOWERBOUND/CONST_ACCELERATION_UPPERBOUND
float64 acceleration

float64 CONST_STEER_LEFTMOST=28.1
float64 CONST_STEER_RIGHTMOST=-28.1

# Target steering angle in unit of degree(deg)
#
# - The negative value indicates right steer(positive: left steer)
# - The value out of range [CONST_STEER_RIGHTMOST, CONST_STEER_LEFTMOST] will be adjusted to CONST_STEER_LEFTMOST/CONST_STEER_RIGHTMOST
float64 steer

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  TYPE_GEAR_FORWARD = 0
  TYPE_GEAR_NEUTRAL = 1
  TYPE_GEAR_BACKWARD = 2
  TYPE_GEAR_PARKING = 3
  CONST_SPEED_UPPERBOUND = 5.5
  CONST_SPEED_LOWERBOUND = -5.5
  CONST_ACCELERATION_UPPERBOUND = 4.0
  CONST_ACCELERATION_LOWERBOUND = -4.0
  CONST_STEER_LEFTMOST = 28.1
  CONST_STEER_RIGHTMOST = -28.1

  __slots__ = ['header','emergency_stop','gear','speed','acceleration','steer']
  _slot_types = ['std_msgs/Header','bool','uint8','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,emergency_stop,gear,speed,acceleration,steer

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GenericVehicleControl, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.emergency_stop is None:
        self.emergency_stop = False
      if self.gear is None:
        self.gear = 0
      if self.speed is None:
        self.speed = 0.
      if self.acceleration is None:
        self.acceleration = 0.
      if self.steer is None:
        self.steer = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.emergency_stop = False
      self.gear = 0
      self.speed = 0.
      self.acceleration = 0.
      self.steer = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B3d().pack(_x.emergency_stop, _x.gear, _x.speed, _x.acceleration, _x.steer))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.emergency_stop, _x.gear, _x.speed, _x.acceleration, _x.steer,) = _get_struct_2B3d().unpack(str[start:end])
      self.emergency_stop = bool(self.emergency_stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B3d().pack(_x.emergency_stop, _x.gear, _x.speed, _x.acceleration, _x.steer))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.emergency_stop, _x.gear, _x.speed, _x.acceleration, _x.steer,) = _get_struct_2B3d().unpack(str[start:end])
      self.emergency_stop = bool(self.emergency_stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3d = None
def _get_struct_2B3d():
    global _struct_2B3d
    if _struct_2B3d is None:
        _struct_2B3d = struct.Struct("<2B3d")
    return _struct_2B3d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
