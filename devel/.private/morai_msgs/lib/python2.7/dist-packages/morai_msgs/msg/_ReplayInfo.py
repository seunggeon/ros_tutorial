# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from morai_msgs/ReplayInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ReplayInfo(genpy.Message):
  _md5sum = "5461824bc0fed3d006858ffb04fc7b18"
  _type = "morai_msgs/ReplayInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

float64 ego_acc
float64 ego_brake
float64 ego_steer

float64 ego_orientation_x
float64 ego_orientation_y
float64 ego_orientation_z
float64 ego_orientation_w

float64 ego_linearAcceleration_x
float64 ego_linearAcceleration_y
float64 ego_linearAcceleration_z

float64 ego_AngularVelocity_x
float64 ego_AngularVelocity_y
float64 ego_AngularVelocity_z

int32 num_of_objects
int16[] object_type

int32[] object_id

float64[] pose_x
float64[] pose_y
float64[] pose_z

float64[] heading

float64[] size_x
float64[] size_y
float64[] size_z

float64[] velocity


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','ego_acc','ego_brake','ego_steer','ego_orientation_x','ego_orientation_y','ego_orientation_z','ego_orientation_w','ego_linearAcceleration_x','ego_linearAcceleration_y','ego_linearAcceleration_z','ego_AngularVelocity_x','ego_AngularVelocity_y','ego_AngularVelocity_z','num_of_objects','object_type','object_id','pose_x','pose_y','pose_z','heading','size_x','size_y','size_z','velocity']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int32','int16[]','int32[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ego_acc,ego_brake,ego_steer,ego_orientation_x,ego_orientation_y,ego_orientation_z,ego_orientation_w,ego_linearAcceleration_x,ego_linearAcceleration_y,ego_linearAcceleration_z,ego_AngularVelocity_x,ego_AngularVelocity_y,ego_AngularVelocity_z,num_of_objects,object_type,object_id,pose_x,pose_y,pose_z,heading,size_x,size_y,size_z,velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReplayInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ego_acc is None:
        self.ego_acc = 0.
      if self.ego_brake is None:
        self.ego_brake = 0.
      if self.ego_steer is None:
        self.ego_steer = 0.
      if self.ego_orientation_x is None:
        self.ego_orientation_x = 0.
      if self.ego_orientation_y is None:
        self.ego_orientation_y = 0.
      if self.ego_orientation_z is None:
        self.ego_orientation_z = 0.
      if self.ego_orientation_w is None:
        self.ego_orientation_w = 0.
      if self.ego_linearAcceleration_x is None:
        self.ego_linearAcceleration_x = 0.
      if self.ego_linearAcceleration_y is None:
        self.ego_linearAcceleration_y = 0.
      if self.ego_linearAcceleration_z is None:
        self.ego_linearAcceleration_z = 0.
      if self.ego_AngularVelocity_x is None:
        self.ego_AngularVelocity_x = 0.
      if self.ego_AngularVelocity_y is None:
        self.ego_AngularVelocity_y = 0.
      if self.ego_AngularVelocity_z is None:
        self.ego_AngularVelocity_z = 0.
      if self.num_of_objects is None:
        self.num_of_objects = 0
      if self.object_type is None:
        self.object_type = []
      if self.object_id is None:
        self.object_id = []
      if self.pose_x is None:
        self.pose_x = []
      if self.pose_y is None:
        self.pose_y = []
      if self.pose_z is None:
        self.pose_z = []
      if self.heading is None:
        self.heading = []
      if self.size_x is None:
        self.size_x = []
      if self.size_y is None:
        self.size_y = []
      if self.size_z is None:
        self.size_z = []
      if self.velocity is None:
        self.velocity = []
    else:
      self.header = std_msgs.msg.Header()
      self.ego_acc = 0.
      self.ego_brake = 0.
      self.ego_steer = 0.
      self.ego_orientation_x = 0.
      self.ego_orientation_y = 0.
      self.ego_orientation_z = 0.
      self.ego_orientation_w = 0.
      self.ego_linearAcceleration_x = 0.
      self.ego_linearAcceleration_y = 0.
      self.ego_linearAcceleration_z = 0.
      self.ego_AngularVelocity_x = 0.
      self.ego_AngularVelocity_y = 0.
      self.ego_AngularVelocity_z = 0.
      self.num_of_objects = 0
      self.object_type = []
      self.object_id = []
      self.pose_x = []
      self.pose_y = []
      self.pose_z = []
      self.heading = []
      self.size_x = []
      self.size_y = []
      self.size_z = []
      self.velocity = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_13di().pack(_x.ego_acc, _x.ego_brake, _x.ego_steer, _x.ego_orientation_x, _x.ego_orientation_y, _x.ego_orientation_z, _x.ego_orientation_w, _x.ego_linearAcceleration_x, _x.ego_linearAcceleration_y, _x.ego_linearAcceleration_z, _x.ego_AngularVelocity_x, _x.ego_AngularVelocity_y, _x.ego_AngularVelocity_z, _x.num_of_objects))
      length = len(self.object_type)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.object_type))
      length = len(self.object_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.object_id))
      length = len(self.pose_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.pose_x))
      length = len(self.pose_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.pose_y))
      length = len(self.pose_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.pose_z))
      length = len(self.heading)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.heading))
      length = len(self.size_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.size_x))
      length = len(self.size_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.size_y))
      length = len(self.size_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.size_z))
      length = len(self.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 108
      (_x.ego_acc, _x.ego_brake, _x.ego_steer, _x.ego_orientation_x, _x.ego_orientation_y, _x.ego_orientation_z, _x.ego_orientation_w, _x.ego_linearAcceleration_x, _x.ego_linearAcceleration_y, _x.ego_linearAcceleration_z, _x.ego_AngularVelocity_x, _x.ego_AngularVelocity_y, _x.ego_AngularVelocity_z, _x.num_of_objects,) = _get_struct_13di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.object_type = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.object_id = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pose_x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pose_y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pose_z = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.heading = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.size_x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.size_y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.size_z = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.velocity = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_13di().pack(_x.ego_acc, _x.ego_brake, _x.ego_steer, _x.ego_orientation_x, _x.ego_orientation_y, _x.ego_orientation_z, _x.ego_orientation_w, _x.ego_linearAcceleration_x, _x.ego_linearAcceleration_y, _x.ego_linearAcceleration_z, _x.ego_AngularVelocity_x, _x.ego_AngularVelocity_y, _x.ego_AngularVelocity_z, _x.num_of_objects))
      length = len(self.object_type)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.object_type.tostring())
      length = len(self.object_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.object_id.tostring())
      length = len(self.pose_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.pose_x.tostring())
      length = len(self.pose_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.pose_y.tostring())
      length = len(self.pose_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.pose_z.tostring())
      length = len(self.heading)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.heading.tostring())
      length = len(self.size_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.size_x.tostring())
      length = len(self.size_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.size_y.tostring())
      length = len(self.size_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.size_z.tostring())
      length = len(self.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 108
      (_x.ego_acc, _x.ego_brake, _x.ego_steer, _x.ego_orientation_x, _x.ego_orientation_y, _x.ego_orientation_z, _x.ego_orientation_w, _x.ego_linearAcceleration_x, _x.ego_linearAcceleration_y, _x.ego_linearAcceleration_z, _x.ego_AngularVelocity_x, _x.ego_AngularVelocity_y, _x.ego_AngularVelocity_z, _x.num_of_objects,) = _get_struct_13di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.object_type = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.object_id = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pose_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pose_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pose_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.heading = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.size_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.size_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.size_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13di = None
def _get_struct_13di():
    global _struct_13di
    if _struct_13di is None:
        _struct_13di = struct.Struct("<13di")
    return _struct_13di
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
