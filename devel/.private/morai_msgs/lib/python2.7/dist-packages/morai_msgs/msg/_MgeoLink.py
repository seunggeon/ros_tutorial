# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from morai_msgs/MgeoLink.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class MgeoLink(genpy.Message):
  _md5sum = "5259cb6df2dc66cea1017651f36dfbf5"
  _type = "morai_msgs/MgeoLink"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string link_id
float32 cost
float32 time_cost

uint32 lane_idx
string left_link_id
string right_link_id

string to_node_id
string from_node_id

int32 link_type
uint32 length
uint32 speed

# 0: not change, 1: left, 2: right
int32 change_lane
# change target link id
string change_link_id

# link_type enum
int32 LINK_NONE=0
int32 LINK_TOLLGATE_NORMAL=3
int32 LINK_BUS_LANE=4
int32 LINK_REVERSIBLE_LANE=5
int32 LINK_REGULAR_LANE=6

# change_lane enum
int32 CHANGE_NONE=0
int32 CHANGE_LEFT=1
int32 CHANGE_RIGHT=2

geometry_msgs/Pose[] waypoints

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  LINK_NONE = 0
  LINK_TOLLGATE_NORMAL = 3
  LINK_BUS_LANE = 4
  LINK_REVERSIBLE_LANE = 5
  LINK_REGULAR_LANE = 6
  CHANGE_NONE = 0
  CHANGE_LEFT = 1
  CHANGE_RIGHT = 2

  __slots__ = ['link_id','cost','time_cost','lane_idx','left_link_id','right_link_id','to_node_id','from_node_id','link_type','length','speed','change_lane','change_link_id','waypoints']
  _slot_types = ['string','float32','float32','uint32','string','string','string','string','int32','uint32','uint32','int32','string','geometry_msgs/Pose[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       link_id,cost,time_cost,lane_idx,left_link_id,right_link_id,to_node_id,from_node_id,link_type,length,speed,change_lane,change_link_id,waypoints

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MgeoLink, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.link_id is None:
        self.link_id = ''
      if self.cost is None:
        self.cost = 0.
      if self.time_cost is None:
        self.time_cost = 0.
      if self.lane_idx is None:
        self.lane_idx = 0
      if self.left_link_id is None:
        self.left_link_id = ''
      if self.right_link_id is None:
        self.right_link_id = ''
      if self.to_node_id is None:
        self.to_node_id = ''
      if self.from_node_id is None:
        self.from_node_id = ''
      if self.link_type is None:
        self.link_type = 0
      if self.length is None:
        self.length = 0
      if self.speed is None:
        self.speed = 0
      if self.change_lane is None:
        self.change_lane = 0
      if self.change_link_id is None:
        self.change_link_id = ''
      if self.waypoints is None:
        self.waypoints = []
    else:
      self.link_id = ''
      self.cost = 0.
      self.time_cost = 0.
      self.lane_idx = 0
      self.left_link_id = ''
      self.right_link_id = ''
      self.to_node_id = ''
      self.from_node_id = ''
      self.link_type = 0
      self.length = 0
      self.speed = 0
      self.change_lane = 0
      self.change_link_id = ''
      self.waypoints = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.link_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2fI().pack(_x.cost, _x.time_cost, _x.lane_idx))
      _x = self.left_link_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.right_link_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.to_node_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.from_node_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i2Ii().pack(_x.link_type, _x.length, _x.speed, _x.change_lane))
      _x = self.change_link_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypoints is None:
        self.waypoints = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.link_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.link_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.cost, _x.time_cost, _x.lane_idx,) = _get_struct_2fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_link_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left_link_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_link_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right_link_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.to_node_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.to_node_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.from_node_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.from_node_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.link_type, _x.length, _x.speed, _x.change_lane,) = _get_struct_i2Ii().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.change_link_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.change_link_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v4 = val1.orientation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.waypoints.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.link_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2fI().pack(_x.cost, _x.time_cost, _x.lane_idx))
      _x = self.left_link_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.right_link_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.to_node_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.from_node_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i2Ii().pack(_x.link_type, _x.length, _x.speed, _x.change_lane))
      _x = self.change_link_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _v5 = val1.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypoints is None:
        self.waypoints = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.link_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.link_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.cost, _x.time_cost, _x.lane_idx,) = _get_struct_2fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_link_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left_link_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_link_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right_link_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.to_node_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.to_node_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.from_node_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.from_node_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.link_type, _x.length, _x.speed, _x.change_lane,) = _get_struct_i2Ii().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.change_link_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.change_link_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.waypoints.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fI = None
def _get_struct_2fI():
    global _struct_2fI
    if _struct_2fI is None:
        _struct_2fI = struct.Struct("<2fI")
    return _struct_2fI
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_i2Ii = None
def _get_struct_i2Ii():
    global _struct_i2Ii
    if _struct_i2Ii is None:
        _struct_i2Ii = struct.Struct("<i2Ii")
    return _struct_i2Ii
